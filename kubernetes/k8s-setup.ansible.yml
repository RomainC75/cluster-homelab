---
- name: System upgrading
  hosts: all
  become: true

  vars_files:
    - vars.yml

  pre_tasks:
    - name: Update apt cache if needed
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

  tasks:
    - name: Install git
      ansible.builtin.package:
        name: git
        state: present
    - name: Ensure keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download and dearmor Kubernetes signing key
      ansible.builtin.shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Set proper permissions on the GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        mode: '0644'

    - name: Add Kubernetes APT repository (v1.31)
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /

    # - name: Update APT cache
    #   ansible.builtin.apt:
    #     update_cache: yes

    - name: Install containerd/kubelet/kubeadm/kubectl
      ansible.builtin.apt:
        name:
          - containerd
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

    - name: Activate SystemdCgroup in /etc/example.conf
      ansible.builtin.shell: mkdir -p /etc/containerd && containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' | sudo tee /etc/containerd/config.toml

    - name: Restart service containerd
      ansible.builtin.service:
        name: containerd
        state: restarted 

    - name: Disable swap 
      ansible.builtin.shell: swapoff -a

    - name: Disable swap permanently
      ansible.builtin.replace: 
        path: /etc/fstab
        regexp: '^([^#].*\s+swap\s+.*)$'
        replace: '# \1'
        
    - name: Activate ip_forward
      ansible.builtin.replace:
        path: /etc/sysctl.conf
        regexp: '^#?(net\.ipv4\.ip_forward\s*=\s*1)'
        replace: '\1'

    - name: Reload sysctl after modifying sysctl.conf
      ansible.builtin.command: sudo sysctl -p 

    # =====  for flannel  =======
    - name: Load a kernel module br_netfilter
      ansible.builtin.shell: modprobe br_netfilter

    - name: Make the settings persist in case of reboot for br_netfilter
      ansible.builtin.copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          br_netfilter
        mode: '0644'
        owner: root
        group: root

    - name: Create /etc/sysctl.d/k8s.conf if not exists
      ansible.builtin.file:
        path: /etc/sysctl.d/k8s.conf
        state: touch
        mode: '0644'
        owner: root
        group: root

    - name: Set required sysctl params
      ansible.builtin.blockinfile:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1
        mode: '0644'
        owner: root
        group: root

    - name: Reload sysctl settings
      ansible.builtin.command: sysctl --system
    

- name: Setup kubeadm
  hosts: masters
  become: true
  vars_files:
    - vars.yml

  tasks:
    # - name: Verify kubeadm is not launched
    # Port 6443 10259  10257 is in use ? 


    - name: Verify /etc/kubernetes/manifests/kube-apiserver.yaml exists
      ansible.builtin.stat:
        path: /etc/kubernetes/manifests/kube-apiserver.yaml
      register: kubeapiserver_file

    - name: Show stat of kube-apiserver.yaml
      ansible.builtin.debug:
        var: kubeapiserver_file

    - name: Stop play if file exists
      ansible.builtin.meta: end_play
      when: kubeapiserver_file.stat.exists

    - name: Launch the kubeadm setup on the master
      ansible.builtin.command: kubeadm init --apiserver-advertise-address 192.168.56.254 --pod-network-cidr "10.244.0.0/16" --upload-certs
      register: kubeadm_output

    - name: Get kubeadm join command and next line
      ansible.builtin.set_fact:
        kubeadm_join_full: |
          {% set join_line_index = kubeadm_output.stdout_lines | select('search', '^kubeadm join ') | list | first %}
          {% if join_line_index is not none %}
            {{ kubeadm_output.stdout_lines[kubeadm_output.stdout_lines.index(join_line_index)] }}
            {{ kubeadm_output.stdout_lines[kubeadm_output.stdout_lines.index(join_line_index) + 1] }}
          {% else %}
            "kubeadm join command not found"
          {% endif %}

    # ! when kubeadm is ok !! 
    - name: Show full kubeadm join command
      ansible.builtin.debug:
        var: kubeadm_join_full

    - name: Remove newlines and tabs from kubeadm join command
      ansible.builtin.set_fact:
        kubeadm_join_cleaned: "{{ kubeadm_join_full | replace('\n', ' ') | replace('\t', ' ') }}"
    - name: Show full kubeadm join command
      ansible.builtin.debug:
        var: kubeadm_join_cleaned

    - name: Remove \\ using echo and sed
      ansible.builtin.shell: echo "{{ kubeadm_join_cleaned }}" | sed 's/\\//g'
      register: kubeadm_join_no_backslashes

    - name: Show final cleaned kubeadm join command
      ansible.builtin.debug:
        var: kubeadm_join_no_backslashes.stdout

    - name: Copy content to a file in the master
      ansible.builtin.copy:
        content: "{{ kubeadm_join_no_backslashes.stdout }}"
        dest: "{{ node_connection_command }}"
        mode: "400"

    - name: Get connection command
      ansible.builtin.fetch:
        src: "{{ node_connection_command }}"
        dest: ./temp/               # path on your local machine (Ansible controller)
        flat: true

    - name: Ensure .kube directory exists
      ansible.builtin.file:
        path: "/home/{{ user }}/.kube"
        state: directory
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: '0755'

    - name: Copy kube config to user home
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        remote_src: true
        dest: "/home/{{ user }}/.kube/config"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: '0644'

    # - name: Pause for 3 seconds
    #   ansible.builtin.pause:
    #     seconds: 10
- name: Install flanel
  hosts: masters
  tasks:
    - name: Apply Flannel CNI
      ansible.builtin.shell: |
        kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      args:
        executable: /bin/bash


    # sudo chown $(id -u):$(id -g) $HOME/.kube/config

- name: Connect nodes to master
  hosts: nodes
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Copy commands.txt to remote as a script
      ansible.builtin.copy:
        src: ./temp/kubeadm_join_command.txt
        dest: /home/{{ user }}/kubeadm_join_command.sh
        mode: '0755'

    - name: Execute commands.sh on remote
      ansible.builtin.shell: /home/{{ user }}/kubeadm_join_command.sh
